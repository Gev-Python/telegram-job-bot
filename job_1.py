import requests
import pytz
import json
import os
import datetime
from bs4 import BeautifulSoup
from apscheduler.schedulers.background import BackgroundScheduler
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler
from telegram import InputFile, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, Update
from parser import parse_laptops  


SUBSCRIBERS_FILE = "subscribers.json"


def parse_jobs(limit=5):
    url = "https://remoteok.com/remote-dev+python-jobs"
    headers = {"User-Agent": "Mozilla/5.0"}

    try:
        response = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(response.text, "html.parser")
        jobs = soup.select("tr.job")  

        result = []
        for job in jobs:
            if "data-id" not in job.attrs:
                continue  

            title_tag = job.select_one("td.position h2")
            company_tag = job.select_one("td.company h3")
            link_tag = job.get("data-href")

            if not title_tag or not company_tag or not link_tag:
                continue

            title = title_tag.text.strip()
            company = company_tag.text.strip()
            link = "https://remoteok.com" + link_tag.strip()

            result.append(f"üíº {title} ‚Äî {company}\nüîó {link}")

            if len(result) >= limit:
                break

        return "\n\n".join(result) if result else "‚ùå –í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π: {e}"


def load_subscribers():
    if os.path.exists(SUBSCRIBERS_FILE):
        with open(SUBSCRIBERS_FILE, "r") as f:
            return json.load(f)
    return []

def save_subscribers(subscribers):
    with open(SUBSCRIBERS_FILE, "w") as f:
        json.dump(subscribers, f)


from pytz import timezone  
armenia = timezone("Asia/Yerevan")
TOKEN = "7256527051:AAEgPdUZzLRLHtv3rz67qj7JW2SX1E8tD9M"
scheduler = BackgroundScheduler()
scheduler.start()
print("üöÄ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ó–ê–ü–£–©–ï–ù")

def main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì• Excel", callback_data='get_excel'),
         InlineKeyboardButton("üíµ –ö—É—Ä—Å", callback_data='get_usd')],
        [InlineKeyboardButton("üì¢ –ù–æ–≤–æ—Å—Ç–∏", callback_data='get_news')],
        [InlineKeyboardButton("üîÅ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='refresh')],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data='delete')],
        [InlineKeyboardButton("üìå –í–∞–∫–∞–Ω—Å–∏–∏", callback_data='get_jobs')]
    ])



def get_news(limit=5):
    url = "https://www.theverge.com/tech"
    headers = {
        "User-Agent": "Mozilla/5.0"
    }

    try:
        response = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(response.text, "html.parser")

        news_list = []
        links = soup.find_all("a", href=True)

        for link in links:
            title = link.text.strip()
            href = link["href"]

            # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –º—É—Å–æ—Ä
            if len(title) < 25 or "theverge.com" not in href and not href.startswith("/"):
                continue

            # –¥–µ–ª–∞–µ–º —Å—Å—ã–ª–∫—É –ø–æ–ª–Ω–æ–π
            if not href.startswith("http"):
                href = "https://www.theverge.com" + href

            news_list.append(f"üì∞ {title}\nüîó {href}")

            if len(news_list) >= limit:
                break

        return "\n\n".join(news_list) if news_list else "‚ùå –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}"

    


def get_usd_to_amd():
    url = "https://open.er-api.com/v6/latest/USD"
    try:
        response = requests.get(url, timeout=10)
        data = response.json()
        print("–†–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:", data)
        if "rates" in data and "AMD" in data["rates"]:
            return round(data["rates"]["AMD"], 2)
        else:
            return "–û—à–∏–±–∫–∞: –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", e)
        return "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"


def start(update, context):
    
    update.message.reply_text("üîΩ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())

def subscribe(update, context):
    from pytz import timezone
    armenia = timezone("Asia/Yerevan")

    chat_id = update.message.chat_id
    print("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è —á–∞—Ç–∞:", chat_id)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    subscribers = load_subscribers()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω
    if chat_id not in subscribers:
        subscribers.append(chat_id)
        save_subscribers(subscribers)
        print("1sub")

    scheduler.add_job(
        scheduled_task,
        trigger='cron',
        hour=datetime.datetime.now().hour,
        minute=(datetime.datetime.now().minute + 1) % 60,
        args=[chat_id],
        id=str(chat_id),
        replace_existing=True,
        timezone=armenia
    )

    


    update.message.reply_text("‚úÖ –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞.")

def unsubscribe(update, context):
    chat_id = update.message.chat_id
    removed = False

    for task_id in [str(chat_id), f"{chat_id}_jobs"]:
        if scheduler.get_job(task_id):
            scheduler.remove_job(task_id)
            removed = True
    
    subscribers = load_subscribers()
    if chat_id in subscribers:
        subscribers.remove(chat_id)
        save_subscribers(subscribers)

    if removed:
        update.message.reply_text("‚ùå –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    else:
        update.message.reply_text("‚ÑπÔ∏è –£ —Ç–µ–±—è –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–æ–∫.")


def autoparse(update, context):
    update.message.reply_text("‚è≥ –ê–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω...")
    parse_laptops("laptops_auto.xlsx")
    with open("laptops_auto.xlsx", "rb") as file:
        update.message.reply_document(document=InputFile(file), filename="–ê–≤—Ç–æ–ù–æ—É—Ç–±—É–∫–∏.xlsx")



def status(update, context):
    chat_id = update.message.chat_id
    subscribers = load_subscribers()
    if chat_id in subscribers:
        update.message.reply_text("‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
    else:
        update.message.reply_text("‚ÑπÔ∏è –¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω.")


def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()


    

    if query.data == "get_excel":
        query.edit_message_text("‚è≥ –ü–æ–ª—É—á–∞—é Excel-—Ñ–∞–π–ª...")
        parse_laptops("laptops_auto.xlsx")
        with open("laptops_auto.xlsx", "rb") as file:
            context.bot.send_document(chat_id=query.message.chat_id, document=InputFile(file), filename="–ù–æ—É—Ç–±—É–∫–∏.xlsx")
      
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
        ])
        context.bot.send_message(chat_id=query.message.chat_id, text="–ì–æ—Ç–æ–≤–æ. üîΩ –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥?", reply_markup=keyboard)

    elif query.data == "get_usd":
        rate = get_usd_to_amd()
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
        ])
        query.edit_message_text(f"üíµ 1 USD = {rate} AMD", reply_markup=keyboard)

    elif query.data == "get_news":
        query.edit_message_text("üîç –ü–æ–ª—É—á–∞—é –Ω–æ–≤–æ—Å—Ç–∏...")
        news = get_news()
        context.bot.send_message(chat_id=query.message.chat_id, text=news)
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
        ])
        context.bot.send_message(chat_id=query.message.chat_id, text="üîΩ –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥?", reply_markup=keyboard)
        

    elif query.data == "refresh":
        query.edit_message_text("üîΩ –û–±–Ω–æ–≤–ª–µ–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())


    elif query.data == "delete":
        context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)

    elif query.data == "back":
        query.edit_message_text("üîΩ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())

    elif query.data == "get_jobs":
        query.edit_message_text("üîç –ò—â—É –≤–∞–∫–∞–Ω—Å–∏–∏...")
        jobs = parse_jobs()
        context.bot.send_message(chat_id=query.message.chat_id, text=jobs)
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
        ])
        context.bot.send_message(chat_id=query.message.chat_id, text="üîΩ –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥?", reply_markup=keyboard)


def scheduled_task(chat_id):
    print("‚úÖ –ó–ê–î–ê–ß–ê –°–†–ê–ë–û–¢–ê–õ–ê –¥–ª—è", chat_id)
    from telegram import Bot
    print("üü° –ó–∞–¥–∞—á–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, —Å–æ–∑–¥–∞—é –±–æ—Ç...")
    bot = Bot(TOKEN)
    parse_laptops("laptops_auto.xlsx")
    print("üü° –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω")

    try:
        with open("laptops_auto.xlsx", "rb") as file:
            print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
            bot.send_document(chat_id=chat_id, document=InputFile(file), filename="–ê–≤—Ç–æ–ù–æ—É—Ç–±—É–∫–∏.xlsx")
            bot.send_message(chat_id=chat_id, text="üïí –≠—Ç–æ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ. –î–æ –∑–∞–≤—Ç—Ä–∞!")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", e)

    jobs = parse_jobs()
    bot.send_message(chat_id=chat_id, text="üïí –ù–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:\n\n" + jobs)


def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher


    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(button_handler))
    dp.add_handler(CommandHandler("autoparse", autoparse))
    dp.add_handler(CommandHandler("subscribe", subscribe))
    dp.add_handler(CommandHandler("unsubscribe", unsubscribe))
    dp.add_handler(CommandHandler("status", status))


    for chat_id in load_subscribers():
        scheduler.add_job(
            scheduled_task,
            trigger='cron',
            hour=10, minute=0,
            args=[chat_id],
            id=str(chat_id),
            replace_existing=True,
            timezone=armenia
        )
        print(f"üîÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è {chat_id}")


    updater.start_polling()
    updater.idle()



if __name__ == "__main__":
    main()

